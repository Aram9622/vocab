<?php

namespace App\Http\Controllers\Api\v1;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Image;
use Validator;

class UserController extends ApiController
{
    public function show()
    {
        return $this->getUserDetails();
    }

    public function changePassword(Request $request)
    {
        $data = $request->all();
        $user = Auth::guard('api')->user();

        $validator = Validator::make($request->all(), [
            'oldPassword' => 'required|string|max:100',
            'newPassword' => 'required|string|min:6|max:100',
            'c_newPassword' => 'required|same:password',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 401);
        }

        //checking the old password first
        $check = Auth::guard('web')->attempt([
            'username' => $user->username,
            'password' => $data['oldPassword']
        ]);

        if ($check) {
            $user->password = bcrypt($data['newPassword']);
            $user->isFirstTime = false; //variable created by me to know if is the dummy password or generated by user.
            $user->token()->revoke();
            $token = $user->createToken('newToken')->accessToken;

            //Changing the type
            $user->save();

            return json_encode(array('token' => $token)); //sending the new token
        }

        return response()->json(['error' => ['oldPassword' => "Wrong password information"]], 401);
    }

    /**
     * @param Request $request
     * @return array|\Illuminate\Http\JsonResponse
     */
    public function updateAvatar(Request $request)
    {
        $data = $request->all();

        $validator = Validator::make($data, [
            'avatar' => 'required|string'
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 401);
        }

        auth()->user()->update([
            'avatar' => $data['avatar'],
        ]);

        return $this->getUserDetails();
    }

    public function update(Request $request)
    {
        $data = $request->all();

        $validator = Validator::make($data, [
            'name' => 'required|string|min:2|max:100',
            'email' => 'required|string|email|max:255|unique:users,email,' . auth()->id(),
            'avatar' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 401);
        }

        $user = auth()->user();
        $user->name = $data['name'];
        $user->email = $data['email'];

        if ($request['avatar']) {
            $user->avatar = $request['avatar'];
        }

        $user->save();

        return $this->getUserDetails();
    }
}
